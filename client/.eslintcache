[{"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\index.js":"1","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\App.js":"2","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Header.js":"3","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Footer.js":"4","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\products.js":"5","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Product.js":"6","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Rating.js":"7","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\HomeScreen.js":"8","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\ProductScreen.js":"9","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\store.js":"10","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\reducers\\productReducer.js":"11","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\constants\\productConstants.js":"12","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\actions\\productActions.js":"13","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\ImageLoader.js":"14","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\reducers\\toastReducer.js":"15","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\constants\\toastConstants.js":"16","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Toast\\toastUtils.js":"17","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Toast\\Toast.js":"18","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\actions\\toastActions.js":"19","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\CartScreen.js":"20","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\reducers\\cartReducer.js":"21","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\constants\\cartConstants.js":"22","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\actions\\cartActions.js":"23","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\reducers\\userReducer.js":"24","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\constants\\userConstants.js":"25","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\Loginscreen.js":"26","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Loader.js":"27","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\actions\\userActions.js":"28","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\RegisterScreen.js":"29","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\ProfileScreen.js":"30","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\ShippingScreen.js":"31","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\CheckoutSteps.js":"32","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\PaymentScreen.js":"33","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\PlaceOrderScreen.js":"34","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\reducers\\orderReducer.js":"35","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\constants\\orderConstants.js":"36","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\actions\\orderActions.js":"37","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\OrderScreen.js":"38","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\OrderHistoryScreen.js":"39","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\UserListScreen.js":"40","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\UserEditScreen.js":"41","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\ProductListScreen.js":"42","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\ProductEditScreen.js":"43","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\OrderListScreen.js":"44","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\SelectRating.js":"45","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\SearchBox.js":"46","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Paginate.js":"47"},{"size":248,"mtime":1609883465302,"results":"48","hashOfConfig":"49"},{"size":3070,"mtime":1612384910083,"results":"50","hashOfConfig":"49"},{"size":2789,"mtime":1612385289867,"results":"51","hashOfConfig":"49"},{"size":768,"mtime":1610483070571,"results":"52","hashOfConfig":"49"},{"size":4573,"mtime":1609798151904,"results":"53","hashOfConfig":"49"},{"size":850,"mtime":1609948821963,"results":"54","hashOfConfig":"49"},{"size":713,"mtime":1609963875279,"results":"55","hashOfConfig":"49"},{"size":1155,"mtime":1612383705801,"results":"56","hashOfConfig":"49"},{"size":6495,"mtime":1612296047184,"results":"57","hashOfConfig":"49"},{"size":2370,"mtime":1612207667847,"results":"58","hashOfConfig":"49"},{"size":3949,"mtime":1612369907144,"results":"59","hashOfConfig":"49"},{"size":1576,"mtime":1609884200954,"results":"60","hashOfConfig":"49"},{"size":6176,"mtime":1612369862979,"results":"61","hashOfConfig":"49"},{"size":893,"mtime":1609964079964,"results":"62","hashOfConfig":"49"},{"size":636,"mtime":1609958328241,"results":"63","hashOfConfig":"49"},{"size":72,"mtime":1609955382232,"results":"64","hashOfConfig":"49"},{"size":1263,"mtime":1610143645661,"results":"65","hashOfConfig":"49"},{"size":1978,"mtime":1609970465506,"results":"66","hashOfConfig":"49"},{"size":405,"mtime":1610140722617,"results":"67","hashOfConfig":"49"},{"size":3914,"mtime":1610115738751,"results":"68","hashOfConfig":"49"},{"size":1453,"mtime":1610737615569,"results":"69","hashOfConfig":"49"},{"size":236,"mtime":1609884200949,"results":"70","hashOfConfig":"49"},{"size":1375,"mtime":1610737970041,"results":"71","hashOfConfig":"49"},{"size":4663,"mtime":1611622927937,"results":"72","hashOfConfig":"49"},{"size":1612,"mtime":1610574691892,"results":"73","hashOfConfig":"49"},{"size":2083,"mtime":1612229325873,"results":"74","hashOfConfig":"49"},{"size":256,"mtime":1611263543591,"results":"75","hashOfConfig":"49"},{"size":7996,"mtime":1611767775953,"results":"76","hashOfConfig":"49"},{"size":3037,"mtime":1612229256042,"results":"77","hashOfConfig":"49"},{"size":3590,"mtime":1611603121780,"results":"78","hashOfConfig":"49"},{"size":2458,"mtime":1610733343554,"results":"79","hashOfConfig":"49"},{"size":987,"mtime":1610735336623,"results":"80","hashOfConfig":"49"},{"size":2234,"mtime":1610737929714,"results":"81","hashOfConfig":"49"},{"size":4543,"mtime":1612300822444,"results":"82","hashOfConfig":"49"},{"size":4020,"mtime":1611940420361,"results":"83","hashOfConfig":"49"},{"size":1304,"mtime":1609884200952,"results":"84","hashOfConfig":"49"},{"size":7644,"mtime":1611954441762,"results":"85","hashOfConfig":"49"},{"size":5962,"mtime":1611949634977,"results":"86","hashOfConfig":"49"},{"size":3486,"mtime":1611180452539,"results":"87","hashOfConfig":"49"},{"size":3082,"mtime":1611603143394,"results":"88","hashOfConfig":"49"},{"size":3906,"mtime":1611693868194,"results":"89","hashOfConfig":"49"},{"size":3644,"mtime":1612385046414,"results":"90","hashOfConfig":"49"},{"size":8184,"mtime":1611769312340,"results":"91","hashOfConfig":"49"},{"size":3908,"mtime":1611956876087,"results":"92","hashOfConfig":"49"},{"size":992,"mtime":1612292522873,"results":"93","hashOfConfig":"49"},{"size":888,"mtime":1612395732879,"results":"94","hashOfConfig":"49"},{"size":983,"mtime":1612384944984,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"1qtr5jt",{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"98"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"98"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"98"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"98"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"98"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"98"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"98"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"98"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"98"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\index.js",[],["201","202"],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\App.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Header.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Footer.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\products.js",[],["203","204"],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Product.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Rating.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\HomeScreen.js",["205"],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\ProductScreen.js",["206","207","208","209"],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\store.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\reducers\\productReducer.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\constants\\productConstants.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\actions\\productActions.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\ImageLoader.js",["210"],"import { useState } from 'react'\r\n\r\nconst ImageLoader = ({ product, backupSrc=\"/images/comingSoon.jpg\" }) => {\r\n\r\n    const [imageLoaded, setImageLoaded] = useState(false)\r\n    const [loadingError, setLoadingError] = useState(false)\r\n\r\n    return (\r\n        <div className='img-loader'>\r\n                <img\r\n                    className='w-100'\r\n                    src={loadingError ? backupSrc : product.image}\r\n                    onLoad={()=>setImageLoaded(true)}\r\n                    onError={() =>setLoadingError(true)}\r\n                    alt={product.name}\r\n                />\r\n\r\n                {\r\n                  !imageLoaded && <img \r\n                                    className='img-loading'\r\n                                    src='/images/loadingSM.gif'\r\n                                    />\r\n                }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageLoader\r\n","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\reducers\\toastReducer.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\constants\\toastConstants.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Toast\\toastUtils.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Toast\\Toast.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\actions\\toastActions.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\CartScreen.js",["211"],"import { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport ImageLoader from '../components/ImageLoader'\r\nimport { setToast } from '../actions/toastActions'\r\nimport { addToCart, removeFromCart } from '../actions/cartActions'\r\n\r\n\r\n\r\nconst CartScreen = ({ match, location, history }) => {   //location returns the query string so we can get the qty\r\n    const productId = match.params.id\r\n\r\n    const qty = location.search ? Number(location.search.split('=')[1]) : 1 //location.search gets us the query params (everything in query string after '?').\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const cart = useSelector(state => state.cart)\r\n    const { cartItems } = cart\r\n\r\n\r\n    useEffect(() => {\r\n        if (productId) {\r\n            dispatch(addToCart(productId, qty))\r\n        }\r\n    }, [dispatch, productId, qty])\r\n\r\n    const removeFromCartHandler = id => {\r\n        dispatch(removeFromCart(id))\r\n    }\r\n\r\n    const checkoutHandler = () => {\r\n        history.push('/login?redirect=shipping') // redirect will send to login if not login\r\n    }\r\n\r\n    return (\r\n        <div className='flex column'>\r\n\r\n            {cartItems.length === 0 ? (\r\n                <div className='flex column'>\r\n                    <h1>Your Cart is Empty</h1>\r\n                    <Link className='btn m-1' to='/'>Go Back</Link>\r\n                </div>\r\n\r\n            )\r\n                :\r\n                <>\r\n                    <h1 className='underline my-1'>Shopping Cart</h1>\r\n                    <div className=\"grid grid-offset\">\r\n                        <div className=\"flex column\">\r\n                            {cartItems.map(item => (\r\n                                <div\r\n                                    className='grid grid-5'\r\n                                    key={item.product}\r\n                                >\r\n                                    <div style={{ maxWidth: '200px' }}>\r\n                                        <ImageLoader product={item} />\r\n                                    </div>\r\n                                    <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                    <strong>${item.price}</strong>\r\n                                    <select\r\n                                        type='select'\r\n                                        value={item.qty}\r\n                                        onChange={e => dispatch(addToCart(item.product, Number(e.target.value)))}\r\n                                    >\r\n                                        {[...Array(item.countInStock).keys()].map(x => (\r\n                                            <option key={x + 1} value={x + 1}>\r\n                                                {x + 1}\r\n                                            </option>\r\n                                        ))}\r\n                                    </select>\r\n                                    <i\r\n                                        onClick={() => removeFromCartHandler(item.product)}\r\n                                        className=\"fas fa-trash pointer\" />\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <div className='flex column'>\r\n                            <div className=\"flex column border p-2 my-2\">\r\n                                <h2 className='underline'>Subtotal ({cartItems.reduce((acc, item) => acc + item.qty, 0)} items)</h2>\r\n                                ${cartItems.reduce((acc, item) => acc + item.qty * item.price, 0).toFixed(2)}\r\n                                <button onClick={checkoutHandler} className=\"btn\">Checkout</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CartScreen\r\n","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\reducers\\cartReducer.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\constants\\cartConstants.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\actions\\cartActions.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\reducers\\userReducer.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\constants\\userConstants.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\Loginscreen.js",["212"],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Loader.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\actions\\userActions.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\RegisterScreen.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\ProfileScreen.js",["213","214"],"import { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setToast } from '../actions/toastActions'\r\nimport Loader from '../components/Loader'\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\r\n\r\nconst ProfileScreen = ({ location, history }) => {\r\n\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\")\r\n    const [name, setName] = useState(\"\")\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const { loading, error, user } = userDetails\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\r\n    const { success } = userUpdateProfile\r\n\r\n    \r\n\r\n\r\n    const submitHandler = e => {\r\n        e.preventDefault()\r\n        if (password !== confirmPassword) {\r\n            dispatch(setToast(\"Passwords do not match\", \"error\"))\r\n        }\r\n        else {\r\n            dispatch(updateUserProfile({ id: user._id, name, email, password }))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        } else {\r\n            if (!user || !user.name || success) {\r\n                dispatch({ type: USER_UPDATE_PROFILE_RESET })\r\n                dispatch(getUserDetails('profile'))\r\n            } else {\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n            }\r\n        }\r\n    }, [history, userInfo, dispatch, user, success])\r\n\r\n    return (\r\n        <>\r\n            {/* { error && errorHandler()} */}\r\n            {loading && <Loader />}\r\n            <div className='flex column'>\r\n                <h1 className='my-2'>Edit Profile</h1>\r\n                <form onSubmit={submitHandler}>\r\n                    <input\r\n                        type=\"email\"\r\n                        required={true}\r\n                        className='input my-1'\r\n                        placeholder='Enter Email'\r\n                        value={email}\r\n                        onChange={e => setEmail(e.target.value)}\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        required={true}\r\n                        className='input my-1'\r\n                        placeholder='Enter Name'\r\n                        value={name}\r\n                        onChange={e => setName(e.target.value)}\r\n                    />\r\n                    <input\r\n                        type=\"password\"\r\n                        required={true}\r\n                        className='input my-1'\r\n                        placeholder='Enter Password'\r\n                        value={password}\r\n                        onChange={e => setPassword(e.target.value)}\r\n                    />\r\n                    <input\r\n                        type=\"password\"\r\n                        required={true}\r\n                        className='input my-1'\r\n                        placeholder='Confirm Password'\r\n                        value={confirmPassword}\r\n                        onChange={e => setConfirmPassword(e.target.value)}\r\n                    />\r\n                    <button className='btn' type='submit'>Submit</button>\r\n                </form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileScreen\r\n","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\ShippingScreen.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\CheckoutSteps.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\PaymentScreen.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\PlaceOrderScreen.js",["215"],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\reducers\\orderReducer.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\constants\\orderConstants.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\actions\\orderActions.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\OrderScreen.js",["216"],"import { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport { PayPalButton } from 'react-paypal-button-v2'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { getOrderDetails, payOrder } from '../actions/orderActions'\r\nimport { setToast } from '../actions/toastActions'\r\nimport Loader from '../components/Loader'\r\nimport ImageLoader from '../components/ImageLoader'\r\nimport { ORDER_PAY_RESET } from '../constants/orderConstants'\r\n\r\nconst PlaceOrderScreen = ({ match }) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const orderId = match.params.id\r\n\r\n    const [sdkReady, setSdkReady] = useState(false)\r\n\r\n    const orderDetails = useSelector(state => state.orderDetails)\r\n    const { order, loading, success } = orderDetails\r\n\r\n    const orderPay = useSelector(state => state.orderPay)\r\n    const { loading: loadingPay, success: successPay } = orderPay  //renaming loading and success variables\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const addPayPalScript = async () => {\r\n            const { data: clientId } = await axios('/api/config/paypal')\r\n            const script = document.createElement('script')\r\n            script.type = 'text/javascript'\r\n            script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`\r\n            script.async = true\r\n            script.onload = () => {\r\n                setSdkReady(true)\r\n            }\r\n            document.body.appendChild(script)\r\n        }\r\n\r\n        if (!order || order._id !== orderId || successPay) {\r\n            dispatch({ type: ORDER_PAY_RESET })\r\n            dispatch(getOrderDetails(orderId))\r\n        } else if (!order.isPaid) {\r\n            if (!window.paypal) {\r\n                addPayPalScript()\r\n            } else {\r\n                setSdkReady(true)\r\n            }\r\n        }\r\n\r\n\r\n        if (success) dispatch(setToast(\"Congratulations! Your order is complete!\"))\r\n    }, [order, orderId, dispatch, successPay])\r\n\r\n    const successPaymentHandler = (paymentResult) => {\r\n        console.log(paymentResult)\r\n        dispatch(payOrder(orderId, paymentResult))\r\n    }\r\n\r\n    return (\r\n        loading  ? <Loader /> :\r\n            <>\r\n                <h1 className='text-center m-2' >Order #{order._id}</h1>\r\n                <div className='grid grid-offset my-1'>\r\n                    <div className='order-details-container px-1'>\r\n                        <div className='address-'>\r\n                            <h2 className='underline'>Shipping</h2>\r\n                            <p>{order.user.name}</p>\r\n                            <p>{order.shippingAddress.address}</p>\r\n                            <p>{order.shippingAddress.city}</p>\r\n                            <p>{order.shippingAddress.postalCode}</p>\r\n                            <p>{order.shippingAddress.country}</p>\r\n                        </div>\r\n                        <div className='payment-field my-1 p-1 bg-primary border'>\r\n                            <h2 className='underline'>Payment Method</h2>\r\n                            <p>{order.paymentMethod}</p>\r\n                            <strong className={!order.isPaid && 'text-error'}>\r\n                                {!order.isPaid ? \"Not Paid\" : \"Payment Successful!\"}\r\n                            </strong>\r\n                        </div>\r\n                        <div className='my-1 items-field'>\r\n                            <h2 className='underline'>Items</h2>\r\n                            {order.orderItems.length === 0 ?\r\n                                <strong>Order is Empty!</strong>\r\n                                :\r\n                                <div>\r\n                                    {order.orderItems.map((item, i) => (\r\n                                        <div\r\n                                            className='grid grid-3'\r\n                                            key={item.product}\r\n                                        >\r\n                                            <div style={{ maxWidth: '100px' }}>\r\n                                                <ImageLoader product={item} />\r\n                                            </div>\r\n                                            <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                            {item.qty} x ${item.price} = ${item.price * item.qty}\r\n\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div >\r\n                        <div className='m0-auto p-1 bg-primary border'>\r\n                            <h2 className='m-1 text-center underline'>Summary</h2>\r\n                            <div className=\"pricing-breakdown\">\r\n                                <p><strong>Sub Total: </strong>${order.itemsPrice}</p>\r\n                                <p><strong>Shipping: </strong>{order.shippingPrice}</p>\r\n                                <p><strong>Tax: </strong>{order.taxPrice}</p>\r\n                                <div className='m-1'><h3>Total: </h3><strong>${order.totalPrice}</strong></div>\r\n                            </div>\r\n                            {!order.isPaid &&\r\n                                <div>\r\n                                    {loadingPay && <Loader />}\r\n                                    {!sdkReady ? <Loader /> : (\r\n                                        <PayPalButton\r\n                                            amount={order.totalPrice}\r\n                                            onSuccess={successPaymentHandler}\r\n                                        />\r\n                                    )}\r\n                                </div>\r\n                            }\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n    )\r\n}\r\n\r\nexport default PlaceOrderScreen\r\n","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\OrderHistoryScreen.js",["217","218","219"],"import { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setToast } from '../actions/toastActions'\r\nimport Loader from '../components/Loader'\r\nimport { listMyOrders } from '../actions/orderActions'\r\n\r\nconst OrderHistoryScreen = ({ history }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const orderListMy = useSelector(state => state.orderListMy)\r\n    const { orders, loading: loadingOrders } = orderListMy\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    useEffect(() => {\r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        } else {\r\n            dispatch(listMyOrders())\r\n        }\r\n    }, [history, userInfo, dispatch])\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {loadingOrders ?\r\n                <Loader />\r\n                :\r\n                <div>\r\n                    <h1 className='text-center m-3'>Your Orders</h1>\r\n                    <table id=\"order\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Order Id</th>\r\n                                <th>Date</th>\r\n                                <th>Total</th>\r\n                                <th>Paid</th>\r\n                                <th>Delivered</th>\r\n                            </tr>\r\n                            {orders.map(order => (\r\n                                <tr key={order._id}>\r\n                                    <td><Link to={`/order/${order._id}`}>{order._id}</Link></td>\r\n                                    <td>{new Date(order.createdAt).toLocaleDateString('en-US')}</td>\r\n                                    <td>{order.totalPrice}</td>\r\n                                    <td>\r\n                                        {\r\n                                          order.paidAt ? new Date(order.paidAt).toLocaleDateString('en-US') \r\n                                          : \r\n                                          <span style={{color: 'red'}}>Not Paid</span>\r\n                                        }\r\n                                    </td>\r\n                                    <td>\r\n                                        {\r\n                                            order.isDelivered ? new Date(order.isDelivered).toLocaleDateString('en-US') \r\n                                            :\r\n                                            \"Pending\"\r\n                                        }\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default OrderHistoryScreen\r\n\r\n\r\n{/* <tr className='flex'>\r\n                                <th>Order Id</th>\r\n                                <th>Date</th>\r\n                                <th>Total</th>\r\n                                <th>Paid</th>\r\n                                <th>Delivered</th>\r\n                            </tr>\r\n\r\n{orders.map(order => (\r\n    <tr>\r\n        <td>{order._id}</td>\r\n        <td>{order.paidAt ? new Date(order.paidAt).toLocaleDateString('en-US') : \"Not Paid\"}</td>\r\n        <td>{order.totalPrice}</td>\r\n        <td>{order.isPaid}</td>\r\n        <td>{order.isDelivered ? new Date(order.isDelivered).toLocaleDateString('en-US') : \"Pending\"}</td>\r\n    </tr>\r\n))} */}\r\n","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\UserListScreen.js",["220","221","222"],"import { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setToast } from '../actions/toastActions'\r\nimport Loader from '../components/Loader'\r\nimport { listUsers, delelteUser } from '../actions/userActions'\r\n\r\nconst UserListScreen = ({ history }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userList = useSelector(state => state.userList)\r\n    const { loading, error, users } = userList\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userDelete = useSelector(state => state.userDelete)\r\n    const { success:successDelete } = userDelete\r\n\r\n    useEffect(() => {\r\n        if(userInfo && userInfo.isAdmin) {\r\n        dispatch(listUsers())\r\n        } else {\r\n            history.push('/login')\r\n        }\r\n    }, [dispatch, history, successDelete, userInfo])\r\n\r\n    const handleDelete = id => {\r\n\r\n        if (window.confirm(\"Delete User?\")) {\r\n            dispatch(delelteUser(id))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='flex column'>\r\n            {loading ?\r\n               <Loader />\r\n                :\r\n                <div>\r\n                    <h1 className='text-center m-3'>Users</h1>\r\n                    <table id=\"order\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Id</th>\r\n                                <th>Name</th>\r\n                                <th>Email</th>\r\n                                <th>Admin</th>\r\n                                <th>Edit</th>\r\n                            </tr>\r\n                            {users.map(user => (\r\n                                <tr key={user._id}>\r\n                                    <td><Link to={`/user/${user._id}`}>{user._id}</Link></td>\r\n                                    <td>{user.name}</td>\r\n                                    <td><a href={`mailto:${user.email}`}>{user.email}</a></td>\r\n                                    <td>\r\n                                        {user.isAdmin ? <i className=\"fas fa-check\" style={{ color: 'green' }}></i>\r\n                                            :\r\n                                            <i className=\"fas fa-times\" style={{ color: '#ffcc00' }}></i>\r\n                                        }\r\n                                    </td>\r\n                                    <td>\r\n                                       <Link to={`/admin/user/${user._id}/edit`}>\r\n                                          <i className=\"fas fa-edit m-1\"></i>\r\n                                       </Link>\r\n                                       <i onClick={()=>handleDelete(user._id)}className=\"fas fa-trash m-1 pointer\" style={{color: 'red'}}></i>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserListScreen\r\n","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\UserEditScreen.js",["223"],"import { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport { getUserDetails, updateUser } from '../actions/userActions'\r\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\r\n\r\nconst UserEditScreen = ({ match, history }) => {\r\n\r\n    const userId = match.params.id\r\n\r\n    const [email, setEmail] = useState(\"\")\r\n    const [isAdmin, setIsAdmin] = useState(false)\r\n    const [name, setName] = useState(\"\")\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const { user, loading } = userDetails\r\n\r\n    const userUpdate = useSelector(state => state.userUpdate)\r\n    const { loading: loadingUpdate, error: errorUpdate, success: successUpdate } = userUpdate\r\n\r\n    const submitHandler = e => {\r\n        e.preventDefault()\r\n        dispatch(updateUser({ _id: userId, name, email, isAdmin }))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (successUpdate) {\r\n            dispatch({ type: USER_UPDATE_RESET })\r\n            history.push('/admin/userlist')\r\n        } else {\r\n            if (!user?.name || user._id !== userId) {\r\n                dispatch(getUserDetails(userId))\r\n            } else {\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n                setIsAdmin(user.isAdmin)\r\n            }\r\n        }\r\n\r\n    }, [dispatch, user, userId, successUpdate, history])\r\n\r\n    const handleCheck = () => {  //Im not sure why but a handler must be used for checkbox instead of using setIsdmin (state)\r\n        setIsAdmin(!isAdmin)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Link to='/admin/userlist' className='btn'>Go Back</Link>\r\n\r\n            <div className='flex column'>\r\n                {/* { error && errorHandler()} */}\r\n\r\n                {loading || loadingUpdate ? <Loader /> :\r\n                    <>\r\n                        <h1 className='my-2'>Edit User</h1>\r\n                        <form onSubmit={submitHandler}>\r\n\r\n                            <input\r\n                                type=\"text\"\r\n                                required={true}\r\n                                className='input my-1'\r\n                                placeholder='Enter Name'\r\n                                value={name}\r\n                                onChange={e => setName(e.target.value)}\r\n                            />\r\n\r\n                            <input\r\n                                type=\"email\"\r\n                                required={true}\r\n                                className='input my-1'\r\n                                placeholder='Enter Email'\r\n                                value={email}\r\n                                onChange={e => setEmail(e.target.value)}\r\n                            />\r\n\r\n                            <div className=\"toggle-container\">\r\n                                <input\r\n                                    id=\"admin-checkbox\"\r\n                                    type=\"checkbox\"\r\n                                    className=\"toggle\"\r\n                                    checked={isAdmin}\r\n                                    onChange={handleCheck}\r\n                                />\r\n                                <label\r\n                                    htmlFor=\"admin-checkbox\"\r\n                                    className=\"label\"\r\n                                >\r\n                                    <div className=\"ball\"></div>\r\n                                </label>\r\n                                <span>Admin</span>\r\n                            </div>\r\n                            <button className='btn' type='submit'>Update</button>\r\n                        </form>\r\n                    </>\r\n                }\r\n            </div>\r\n        </>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default UserEditScreen\r\n","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\ProductListScreen.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\ProductEditScreen.js",["224"],"import { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport axios from 'axios'\r\nimport Loader from '../components/Loader'\r\nimport { listProductsDetails, updateProduct } from '../actions/productActions'\r\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants'\r\nimport { SET_TOAST } from '../constants/toastConstants'\r\n\r\nconst ProductEditScreen = ({ match, history }) => {\r\n\r\n    const productId = match.params.id\r\n\r\n\r\n    const [name, setName] = useState('')\r\n    const [price, setPrice] = useState(0)\r\n    const [image, setImage] = useState('')\r\n    const [brand, setBrand] = useState('')\r\n    const [category, setCategory] = useState('')\r\n    const [countInStock, setCountInStock] = useState(0)\r\n    const [description, setDescription] = useState('')\r\n    const [uploading, setupLoading] = useState(false)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const productDetails = useSelector((state) => state.productDetails)\r\n    const { loading, error, product } = productDetails\r\n\r\n    const productUpdate = useSelector((state) => state.productUpdate)\r\n    const { loading: loadingUpdate, success: successUpdate } = productUpdate\r\n\r\n    useEffect(() => {\r\n        if (successUpdate) {\r\n            dispatch({ type: PRODUCT_UPDATE_RESET })\r\n            history.push('/admin/productlist')\r\n        } else {\r\n            if (!product.name || product._id !== productId) {\r\n                dispatch(listProductsDetails(productId))\r\n\r\n            } else {\r\n                setName(product.name)\r\n                setPrice(product.price)\r\n                setImage(product.image)\r\n                setBrand(product.brand)\r\n                setCategory(product.category)\r\n                setCountInStock(product.countInStock)\r\n                setDescription(product.description)\r\n            }\r\n        }\r\n    }, [dispatch, history, productId, product, successUpdate])\r\n\r\n    const uploadFileHandler = async e => {\r\n        const file = e.target.files[0]  //files returns an array; we just want the file one\r\n        const formData = new FormData()\r\n        formData.append('image', file)\r\n\r\n        setupLoading(true)\r\n\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            }\r\n\r\n            const { data } = await axios.post('/api/upload', formData, config)\r\n            \r\n            setImage(data)\r\n            setupLoading(false)\r\n\r\n        } catch (error) {\r\n            console.log(error.message)\r\n            dispatch({\r\n                type: SET_TOAST,\r\n                payload: {\r\n                    message: error.response && error.response.data.msg ? error.response.data.msg : error.message,\r\n                    type: \"error\"\r\n                }\r\n            })\r\n            setupLoading(false)\r\n        }\r\n    }\r\n\r\n    const submitHandler = () => {\r\n\r\n        dispatch(\r\n            updateProduct({\r\n                _id: product._id,\r\n                name,\r\n                price,\r\n                image,\r\n                brand,\r\n                category,\r\n                description,\r\n                countInStock\r\n            })\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Link to='/admin/productlist' className='btn'>Go Back</Link>\r\n\r\n            <div className='flex column'>\r\n                {/* { error && errorHandler()} */}\r\n\r\n                {loading || loadingUpdate ? <Loader /> :\r\n                    <>\r\n                        <h1 className='my-2'>Edit Product</h1>\r\n                        <form onSubmit={submitHandler}>\r\n\r\n                            <input\r\n                                type=\"text\"\r\n                                required={true}\r\n                                className='input my-1'\r\n                                placeholder='Enter Name'\r\n                                value={name}\r\n                                onChange={e => setName(e.target.value)}\r\n                            />\r\n\r\n                            <input\r\n                                type=\"number\"\r\n                                required={true}\r\n                                className='input my-1'\r\n                                placeholder='Enter Price'\r\n                                value={price}\r\n                                onChange={e => setPrice(e.target.value)}\r\n                            />\r\n\r\n                            <input\r\n                                type=\"text\"\r\n                                required={true}\r\n                                className='input my-1'\r\n                                placeholder='Image Url'\r\n                                value={image}\r\n                                onChange={e => setImage(e.target.value)}\r\n                            />\r\n\r\n                            <input\r\n                                type=\"text\"\r\n                                required={true}\r\n                                className='input my-1'\r\n                                placeholder='Brand'\r\n                                value={brand}\r\n                                onChange={e => setBrand(e.target.value)}\r\n                            />\r\n                            <input\r\n                                type=\"text\"\r\n                                required={true}\r\n                                className='input my-1'\r\n                                placeholder='Category'\r\n                                value={category}\r\n                                onChange={e => setCategory(e.target.value)}\r\n                            />\r\n\r\n                            <input\r\n                                type=\"number\"\r\n                                required={true}\r\n                                className='input my-1'\r\n                                placeholder='Count in stock'\r\n                                value={countInStock}\r\n                                onChange={e => setCountInStock(e.target.value)}\r\n                            />\r\n                            <input\r\n                                type=\"text\"\r\n                                required={true}\r\n                                className='input my-1'\r\n                                placeholder='Description'\r\n                                value={description}\r\n                                onChange={e => setDescription(e.target.value)}\r\n                            />\r\n                            <input\r\n                                type=\"text\"\r\n                                required={true}\r\n                                className='input my-1'\r\n                                placeholder='Image Url'\r\n                                value={image}\r\n                                onChange={e => setImage(e.target.value)}\r\n                            />\r\n\r\n                            <input\r\n                                type=\"file\"\r\n                                placeholder='Upload Image'\r\n                                id=\"Choose-File\"\r\n                                style={{ display: 'none' }}\r\n                                onChange={uploadFileHandler}\r\n                            />\r\n                            <div className='flex-end'>\r\n                                <label htmlFor=\"Choose-File\" className='pointer text-primary ml-auto'>\r\n                                    {!uploading ?\r\n                                        <>\r\n                                            <i className='fas fa-plus'></i><strong> Upload Image</strong>\r\n                                        </>\r\n                                        :\r\n                                        <Loader />\r\n                                    }\r\n                                </label>\r\n                            </div>\r\n                            <div className='my-2'>\r\n                                <button className='btn' type='submit'>Update</button>\r\n                            </div>\r\n                        </form>\r\n                    </>\r\n                }\r\n            </div>\r\n        </>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default ProductEditScreen\r\n","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\OrderListScreen.js",["225"],"import { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport { listAllOrders, deliverOrder } from '../actions/orderActions'\r\n\r\nconst OrderListScreen = ({ history }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const orderListAll = useSelector(state => state.orderListAll)\r\n    const { loading, orders } = orderListAll\r\n\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const orderDeliver = useSelector(state => state.orderDeliver)\r\n    const { loading: loadingDeliver, success: successDeliver } = orderDeliver\r\n\r\n    useEffect(() => {\r\n        if (userInfo && userInfo.isAdmin) {\r\n            dispatch(listAllOrders())\r\n        } else {\r\n            history.push('/login')\r\n        }\r\n    }, [dispatch, history, userInfo, successDeliver])\r\n\r\n    const handleMarkedDelivered = id => {\r\n\r\n        if (window.confirm(`Mark order #${id} as delivered?`)) {\r\n            dispatch(deliverOrder(id))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='flex column'>\r\n            {loading ?\r\n                <Loader />\r\n                :\r\n                <div>\r\n                    <h1 className='text-center m-3'>All User Orders</h1>\r\n                    <table id=\"order\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Id</th>\r\n                                <th>Date</th>\r\n                                <th>Paid</th>\r\n                                <th>Email</th>\r\n                                <th>Shipped</th>\r\n                                <th>Recieved</th>\r\n                            </tr>\r\n                            {orders.map(order => (\r\n                                <tr key={order._id}>\r\n                                    <td><Link to={`/order/${order._id}/edit`}>{order._id}</Link></td>\r\n                                    <td>{new Date(order.createdAt).toLocaleDateString('en-US')}</td>\r\n                                    <td>{order.paymentResult && order.paymentResult.status}</td>\r\n                                    <td><a href={`mailto:${order.paymentResult && order.paymentResult.email_address}`}>{order.paymentResult && order.paymentResult.email_address}</a></td>\r\n                                    <td>\r\n                                        {order.isDelivered ? new Date(order.createdAt).toLocaleDateString('en-US')\r\n                                            :\r\n                                            <i className=\"fas fa-times\" style={{ color: '#ffcc00' }}></i>\r\n                                        }\r\n                                    </td>\r\n                                    <td>\r\n                                        {/* Need to add received property to order model */}\r\n                                        {order.isDelivered ?\r\n                                            <p>Recieved</p>\r\n                                            :\r\n                                            <i\r\n                                                onClick={() => handleMarkedDelivered(order._id)}\r\n                                                className=\"fas fa-edit m-1 pointer\">\r\n                                            </i>\r\n                                        }\r\n                                        {/* <i onClick={()=>handleDelete(order._id)}className=\"fas fa-trash m-1 pointer\" style={{color: 'red'}}></i> */}\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                    <p className='text-primary my-1'>*Click Id to view individual customer order.</p>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderListScreen\r\n","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\SelectRating.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\SearchBox.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Paginate.js",["226"],{"ruleId":"227","replacedBy":"228"},{"ruleId":"229","replacedBy":"230"},{"ruleId":"227","replacedBy":"231"},{"ruleId":"229","replacedBy":"232"},{"ruleId":"233","severity":1,"message":"234","line":17,"column":20,"nodeType":"235","messageId":"236","endLine":17,"endColumn":25},{"ruleId":"233","severity":1,"message":"237","line":9,"column":10,"nodeType":"235","messageId":"236","endLine":9,"endColumn":37},{"ruleId":"233","severity":1,"message":"234","line":20,"column":22,"nodeType":"235","messageId":"236","endLine":20,"endColumn":27},{"ruleId":"233","severity":1,"message":"238","line":23,"column":51,"nodeType":"235","messageId":"236","endLine":23,"endColumn":69},{"ruleId":"233","severity":1,"message":"239","line":23,"column":80,"nodeType":"235","messageId":"236","endLine":23,"endColumn":100},{"ruleId":"240","severity":1,"message":"241","line":19,"column":35,"nodeType":"242","endLine":22,"endColumn":39},{"ruleId":"233","severity":1,"message":"243","line":5,"column":10,"nodeType":"235","messageId":"236","endLine":5,"endColumn":18},{"ruleId":"233","severity":1,"message":"243","line":4,"column":10,"nodeType":"235","messageId":"236","endLine":4,"endColumn":18},{"ruleId":"233","severity":1,"message":"244","line":2,"column":10,"nodeType":"235","messageId":"236","endLine":2,"endColumn":14},{"ruleId":"233","severity":1,"message":"234","line":19,"column":22,"nodeType":"235","messageId":"236","endLine":19,"endColumn":27},{"ruleId":"245","severity":1,"message":"246","line":34,"column":8,"nodeType":"247","endLine":34,"endColumn":26,"suggestions":"248"},{"ruleId":"245","severity":1,"message":"249","line":53,"column":8,"nodeType":"247","endLine":53,"endColumn":46,"suggestions":"250"},{"ruleId":"233","severity":1,"message":"251","line":1,"column":10,"nodeType":"235","messageId":"236","endLine":1,"endColumn":18},{"ruleId":"233","severity":1,"message":"243","line":4,"column":10,"nodeType":"235","messageId":"236","endLine":4,"endColumn":18},{"ruleId":"252","severity":1,"message":"253","line":77,"column":1,"nodeType":"254","messageId":"255","endLine":93,"endColumn":8},{"ruleId":"233","severity":1,"message":"251","line":1,"column":10,"nodeType":"235","messageId":"236","endLine":1,"endColumn":18},{"ruleId":"233","severity":1,"message":"243","line":4,"column":10,"nodeType":"235","messageId":"236","endLine":4,"endColumn":18},{"ruleId":"233","severity":1,"message":"234","line":13,"column":22,"nodeType":"235","messageId":"236","endLine":13,"endColumn":27},{"ruleId":"233","severity":1,"message":"256","line":22,"column":44,"nodeType":"235","messageId":"236","endLine":22,"endColumn":55},{"ruleId":"233","severity":1,"message":"234","line":27,"column":22,"nodeType":"235","messageId":"236","endLine":27,"endColumn":27},{"ruleId":"233","severity":1,"message":"257","line":19,"column":22,"nodeType":"235","messageId":"236","endLine":19,"endColumn":36},{"ruleId":"258","severity":1,"message":"259","line":14,"column":60,"nodeType":"260","messageId":"261","endLine":14,"endColumn":62},"no-native-reassign",["262"],"no-negated-in-lhs",["263"],["262"],["263"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'PRODUCT_CREATE_REVIEW_RESET' is defined but never used.","'errorProductReview' is assigned a value but never used.","'productReviewLoading' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setToast' is defined but never used.","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'order._id'. Either include it or remove the dependency array.","ArrayExpression",["264"],"React Hook useEffect has a missing dependency: 'success'. Either include it or remove the dependency array.",["265"],"'useState' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'errorUpdate' is assigned a value but never used.","'loadingDeliver' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},"Update the dependencies array to be: [history, order._id, success]",{"range":"270","text":"271"},"Update the dependencies array to be: [order, orderId, dispatch, successPay, success]",{"range":"272","text":"273"},[1234,1252],"[history, order._id, success]",[1933,1971],"[order, orderId, dispatch, successPay, success]"]