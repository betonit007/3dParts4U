[{"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\index.js":"1","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\App.js":"2","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Header.js":"3","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Footer.js":"4","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\products.js":"5","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Product.js":"6","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Rating.js":"7","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\HomeScreen.js":"8","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\ProductScreen.js":"9","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\store.js":"10","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\reducers\\productReducer.js":"11","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\constants\\productConstants.js":"12","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\actions\\productActions.js":"13","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\ImageLoader.js":"14","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\reducers\\toastReducer.js":"15","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\constants\\toastConstants.js":"16","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Toast\\toastUtils.js":"17","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Toast\\Toast.js":"18","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\actions\\toastActions.js":"19","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\CartScreen.js":"20","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\reducers\\cartReducer.js":"21","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\constants\\cartConstants.js":"22","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\actions\\cartActions.js":"23","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\reducers\\userReducer.js":"24","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\constants\\userConstants.js":"25","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\Loginscreen.js":"26","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Loader.js":"27","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\actions\\userActions.js":"28","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\RegisterScreen.js":"29","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\ProfileScreen.js":"30","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\ShippingScreen.js":"31","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\CheckoutSteps.js":"32","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\PaymentScreen.js":"33","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\PlaceOrderScreen.js":"34","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\reducers\\orderReducer.js":"35","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\constants\\orderConstants.js":"36","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\actions\\orderActions.js":"37","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\OrderScreen.js":"38","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\OrderHistoryScreen.js":"39"},{"size":248,"mtime":1609883465302,"results":"40","hashOfConfig":"41"},{"size":1937,"mtime":1611176582943,"results":"42","hashOfConfig":"41"},{"size":1957,"mtime":1611177972117,"results":"43","hashOfConfig":"41"},{"size":768,"mtime":1610483070571,"results":"44","hashOfConfig":"41"},{"size":4573,"mtime":1609798151904,"results":"45","hashOfConfig":"41"},{"size":850,"mtime":1609948821963,"results":"46","hashOfConfig":"41"},{"size":713,"mtime":1609963875279,"results":"47","hashOfConfig":"41"},{"size":755,"mtime":1610660687085,"results":"48","hashOfConfig":"41"},{"size":3563,"mtime":1610047067078,"results":"49","hashOfConfig":"41"},{"size":1814,"mtime":1611087224457,"results":"50","hashOfConfig":"41"},{"size":1247,"mtime":1609980744531,"results":"51","hashOfConfig":"41"},{"size":1576,"mtime":1609884200954,"results":"52","hashOfConfig":"41"},{"size":1285,"mtime":1610054228675,"results":"53","hashOfConfig":"41"},{"size":893,"mtime":1609964079964,"results":"54","hashOfConfig":"41"},{"size":636,"mtime":1609958328241,"results":"55","hashOfConfig":"41"},{"size":72,"mtime":1609955382232,"results":"56","hashOfConfig":"41"},{"size":1263,"mtime":1610143645661,"results":"57","hashOfConfig":"41"},{"size":1978,"mtime":1609970465506,"results":"58","hashOfConfig":"41"},{"size":405,"mtime":1610140722617,"results":"59","hashOfConfig":"41"},{"size":3914,"mtime":1610115738751,"results":"60","hashOfConfig":"41"},{"size":1453,"mtime":1610737615569,"results":"61","hashOfConfig":"41"},{"size":236,"mtime":1609884200949,"results":"62","hashOfConfig":"41"},{"size":1375,"mtime":1610737970041,"results":"63","hashOfConfig":"41"},{"size":2835,"mtime":1611180774204,"results":"64","hashOfConfig":"41"},{"size":1612,"mtime":1610574691892,"results":"65","hashOfConfig":"41"},{"size":2170,"mtime":1610559016472,"results":"66","hashOfConfig":"41"},{"size":222,"mtime":1610140145256,"results":"67","hashOfConfig":"41"},{"size":4905,"mtime":1611181204789,"results":"68","hashOfConfig":"41"},{"size":3056,"mtime":1610562608815,"results":"69","hashOfConfig":"41"},{"size":3590,"mtime":1611176504648,"results":"70","hashOfConfig":"41"},{"size":2458,"mtime":1610733343554,"results":"71","hashOfConfig":"41"},{"size":987,"mtime":1610735336623,"results":"72","hashOfConfig":"41"},{"size":2234,"mtime":1610737929714,"results":"73","hashOfConfig":"41"},{"size":4569,"mtime":1611006948248,"results":"74","hashOfConfig":"41"},{"size":2726,"mtime":1611180704774,"results":"75","hashOfConfig":"41"},{"size":1304,"mtime":1609884200952,"results":"76","hashOfConfig":"41"},{"size":5016,"mtime":1611087759554,"results":"77","hashOfConfig":"41"},{"size":5978,"mtime":1611086849310,"results":"78","hashOfConfig":"41"},{"size":3486,"mtime":1611180452539,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"1qtr5jt",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"82"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"82"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"82"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"82"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"82"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"82"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"82"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"82"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"82"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"82"},"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\index.js",[],["170","171"],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\App.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Header.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Footer.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\products.js",[],["172","173"],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Product.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Rating.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\HomeScreen.js",["174"],"import { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { listProducts } from '../actions/productActions'\r\nimport Product from '../components/Product'\r\nimport Loader from '../components/Loader'\r\n\r\nconst HomeScreen = () => {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const productList = useSelector(state => state.productList)\r\n  const { loading, error, products } = productList\r\n\r\n  useEffect(() => {\r\n    dispatch(listProducts())\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <>\r\n      { loading ? <Loader />\r\n        :\r\n        <div className=\"grid grid-3 my-2\">\r\n          {products.map(product => <Product key={product._id} product={product} />)}\r\n        </div>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HomeScreen\r\n","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\ProductScreen.js",["175"],"import { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport Rating from '../components/Rating'\r\nimport ImageLoader from '../components/ImageLoader'\r\nimport { listProductsDetails } from '../actions/productActions'\r\n\r\nconst ProductScreen = ({ match, history }) => {\r\n    const [qty, setQty] = useState(1)\r\n\r\n    const dispatch = useDispatch()\r\n    const productDetails = useSelector(state => state.productDetails)\r\n    const { loading, error, product } = productDetails\r\n\r\n    useEffect(() => {\r\n        dispatch(listProductsDetails(match.params.id))\r\n    }, [dispatch, match])\r\n\r\n    const addToCartHandler = () => {\r\n      history.push(`/cart/${match.params.id}?qty=${qty}`)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Link className='btn my-1' to='/'>Go Back</Link>\r\n            { loading ? \"loading...\" :\r\n                <div className=\"grid\">\r\n                    <div className=\"image-container\">\r\n                        <ImageLoader product={product} />\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"grid\">\r\n                            <div className=\"flex column\">\r\n                                <h2 className='py-1 underline w-100'>{product.name}</h2>\r\n                                <Rating rating={product.rating} text={`${product.numReviews} Reviews`} />\r\n                                <p>{product.description}</p>\r\n                            </div>\r\n                            <div className='border p-1 m0-auto'>\r\n                                <div className='flex column'>\r\n                                    <strong><p>Price: ${product.price}</p></strong>\r\n                                    <p className='py-1'>Status: {product.countInStock > 0 ? \"In Stock\" : \"Out of Stock\"} </p>\r\n                                    {product.countInStock > 0 && (\r\n                                        <div className='flex'>\r\n                                            <strong>Quantity: </strong>\r\n                                            <select \r\n                                              type='select' \r\n                                              value={qty} \r\n                                              onChange={e=>setQty(e.target.value)}\r\n                                              >\r\n                                                {[...Array(product.countInStock).keys()].map(x => (\r\n                                                    <option key={x + 1} value={x + 1}>\r\n                                                        {x + 1}\r\n                                                    </option>\r\n                                                ))}\r\n                                              </select>\r\n                                        </div>\r\n                                    )}\r\n                                    <button \r\n                                      className=\"btn\"\r\n                                      style={{marginTop: \"5px\"}} \r\n                                      disabled={product.countInStock === 0}\r\n                                      onClick={addToCartHandler}\r\n                                      >\r\n                                      Add to Cart\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProductScreen\r\n","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\store.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\reducers\\productReducer.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\constants\\productConstants.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\actions\\productActions.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\ImageLoader.js",["176"],"import { useState } from 'react'\r\n\r\nconst ImageLoader = ({ product, backupSrc=\"/images/comingSoon.jpg\" }) => {\r\n\r\n    const [imageLoaded, setImageLoaded] = useState(false)\r\n    const [loadingError, setLoadingError] = useState(false)\r\n\r\n    return (\r\n        <div className='img-loader'>\r\n                <img\r\n                    className='w-100'\r\n                    src={loadingError ? backupSrc : product.image}\r\n                    onLoad={()=>setImageLoaded(true)}\r\n                    onError={() =>setLoadingError(true)}\r\n                    alt={product.name}\r\n                />\r\n\r\n                {\r\n                  !imageLoaded && <img \r\n                                    className='img-loading'\r\n                                    src='/images/loadingSM.gif'\r\n                                    />\r\n                }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageLoader\r\n","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\reducers\\toastReducer.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\constants\\toastConstants.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Toast\\toastUtils.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Toast\\Toast.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\actions\\toastActions.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\CartScreen.js",["177"],"import { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport ImageLoader from '../components/ImageLoader'\r\nimport { setToast } from '../actions/toastActions'\r\nimport { addToCart, removeFromCart } from '../actions/cartActions'\r\n\r\n\r\n\r\nconst CartScreen = ({ match, location, history }) => {   //location returns the query string so we can get the qty\r\n    const productId = match.params.id\r\n\r\n    const qty = location.search ? Number(location.search.split('=')[1]) : 1 //location.search gets us the query params (everything in query string after '?').\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const cart = useSelector(state => state.cart)\r\n    const { cartItems } = cart\r\n\r\n\r\n    useEffect(() => {\r\n        if (productId) {\r\n            dispatch(addToCart(productId, qty))\r\n        }\r\n    }, [dispatch, productId, qty])\r\n\r\n    const removeFromCartHandler = id => {\r\n        dispatch(removeFromCart(id))\r\n    }\r\n\r\n    const checkoutHandler = () => {\r\n        history.push('/login?redirect=shipping') // redirect will send to login if not login\r\n    }\r\n\r\n    return (\r\n        <div className='flex column'>\r\n\r\n            {cartItems.length === 0 ? (\r\n                <div className='flex column'>\r\n                    <h1>Your Cart is Empty</h1>\r\n                    <Link className='btn m-1' to='/'>Go Back</Link>\r\n                </div>\r\n\r\n            )\r\n                :\r\n                <>\r\n                    <h1 className='underline my-1'>Shopping Cart</h1>\r\n                    <div className=\"grid grid-offset\">\r\n                        <div className=\"flex column\">\r\n                            {cartItems.map(item => (\r\n                                <div\r\n                                    className='grid grid-5'\r\n                                    key={item.product}\r\n                                >\r\n                                    <div style={{ maxWidth: '200px' }}>\r\n                                        <ImageLoader product={item} />\r\n                                    </div>\r\n                                    <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                    <strong>${item.price}</strong>\r\n                                    <select\r\n                                        type='select'\r\n                                        value={item.qty}\r\n                                        onChange={e => dispatch(addToCart(item.product, Number(e.target.value)))}\r\n                                    >\r\n                                        {[...Array(item.countInStock).keys()].map(x => (\r\n                                            <option key={x + 1} value={x + 1}>\r\n                                                {x + 1}\r\n                                            </option>\r\n                                        ))}\r\n                                    </select>\r\n                                    <i\r\n                                        onClick={() => removeFromCartHandler(item.product)}\r\n                                        className=\"fas fa-trash pointer\" />\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <div className='flex column'>\r\n                            <div className=\"flex column border p-2 my-2\">\r\n                                <h2 className='underline'>Subtotal ({cartItems.reduce((acc, item) => acc + item.qty, 0)} items)</h2>\r\n                                ${cartItems.reduce((acc, item) => acc + item.qty * item.price, 0).toFixed(2)}\r\n                                <button onClick={checkoutHandler} className=\"btn\">Checkout</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CartScreen\r\n","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\reducers\\cartReducer.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\constants\\cartConstants.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\actions\\cartActions.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\reducers\\userReducer.js",["178"],"import { USER_LOGIN_FAIL, USER_LOGIN_SUCCESS, USER_LOGIN_REQUEST, USER_LOGOUT, USER_CLEAR_LOGIN_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_FAIL, USER_DETAILS_SUCCESS, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS, USER_UPDATE_PROFILE_CLEAR, USER_UPDATE_PROFILE_RESET, USER_DETAILS_RESET, } from '../constants/userConstants'\r\n\r\nexport const userLoginReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case USER_LOGIN_REQUEST:\r\n            return { loading: true }\r\n        case USER_LOGIN_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                userInfo: action.payload\r\n            }\r\n        case USER_LOGIN_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        case USER_CLEAR_LOGIN_FAIL:\r\n            return {\r\n                ...state,\r\n                error: \"\"\r\n            }\r\n        case USER_LOGOUT:\r\n            return {}\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const userRegisterReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case USER_REGISTER_REQUEST:\r\n            return { loading: true }\r\n        case USER_REGISTER_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                userInfo: action.payload\r\n            }\r\n        case USER_REGISTER_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        case USER_LOGOUT:\r\n            return {}\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const userDetailsReducer = (state = { user: {} }, action) => {\r\n    switch (action.type) {\r\n        case USER_DETAILS_REQUEST:\r\n            return { loading: true }\r\n        case USER_DETAILS_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                user: action.payload\r\n            }\r\n        case USER_DETAILS_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        case USER_DETAILS_RESET:\r\n            return {\r\n                user: {}\r\n            }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const userUpdateProfileReducer = (state = { user: {} }, action) => {\r\n    switch (action.type) {\r\n        case USER_UPDATE_PROFILE_REQUEST:\r\n            return { loading: true }\r\n        case USER_UPDATE_PROFILE_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                userInfo: action.payload,\r\n                success: true\r\n            }\r\n        case USER_DETAILS_FAIL:\r\n            return {\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        case USER_UPDATE_PROFILE_RESET:\r\n            return {}\r\n        default: return state\r\n    }\r\n}","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\constants\\userConstants.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\Loginscreen.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\Loader.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\actions\\userActions.js",["179","180","181"],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\RegisterScreen.js",["182"],"import { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setToast } from '../actions/toastActions'\r\nimport Loader from '../components/Loader'\r\nimport { register, clearLoginFail } from '../actions/userActions'\r\n\r\nconst RegisterScreen = ({ location, history }) => {\r\n\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\")\r\n    const [name, setName] = useState(\"\")\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { loading, error, userInfo } = userLogin\r\n\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n\r\n    const submitHandler = e => {\r\n        e.preventDefault()\r\n        if (password !== confirmPassword) {\r\n            dispatch(setToast(\"Passwords do not match\", \"error\"))\r\n        }\r\n        else { dispatch(register(name, email, password)) }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (userInfo) {\r\n            history.push(redirect)\r\n        }\r\n    }, [history, userInfo, redirect])\r\n\r\n    return (\r\n        <div className='flex column'>\r\n            {/* { error && errorHandler()} */}\r\n            { error && dispatch(setToast(error, 'error'))}\r\n            {loading && <Loader />}\r\n\r\n            <h1 className='my-2'>Register</h1>\r\n            <form onSubmit={submitHandler}>\r\n                <input\r\n                    type=\"email\"\r\n                    required={true}\r\n                    className='input my-1'\r\n                    placeholder='Enter Email'\r\n                    value={email}\r\n                    onChange={e => setEmail(e.target.value)}\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    required={true}\r\n                    className='input my-1'\r\n                    placeholder='Enter Name'\r\n                    value={name}\r\n                    onChange={e => setName(e.target.value)}\r\n                />\r\n                <input\r\n                    type=\"password\"\r\n                    required={true}\r\n                    className='input my-1'\r\n                    placeholder='Enter Password'\r\n                    value={password}\r\n                    onChange={e => setPassword(e.target.value)}\r\n                />\r\n                <input\r\n                    type=\"password\"\r\n                    required={true}\r\n                    className='input my-1'\r\n                    placeholder='Confirm Password'\r\n                    value={confirmPassword}\r\n                    onChange={e => setConfirmPassword(e.target.value)}\r\n                />\r\n                <button className='btn' type='submit'>Submit</button>\r\n            </form>\r\n\r\n            <div className='my-2'>\r\n                Already Registered? <Link to={redirect ? `/register?redirect=${redirect}` : '/register'}>Signin</Link>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RegisterScreen\r\n","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\ProfileScreen.js",["183","184"],"import { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setToast } from '../actions/toastActions'\r\nimport Loader from '../components/Loader'\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\r\n\r\nconst ProfileScreen = ({ location, history }) => {\r\n\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\")\r\n    const [name, setName] = useState(\"\")\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const { loading, error, user } = userDetails\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\r\n    const { success } = userUpdateProfile\r\n\r\n    \r\n\r\n\r\n    const submitHandler = e => {\r\n        e.preventDefault()\r\n        if (password !== confirmPassword) {\r\n            dispatch(setToast(\"Passwords do not match\", \"error\"))\r\n        }\r\n        else {\r\n            dispatch(updateUserProfile({ id: user._id, name, email, password }))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        } else {\r\n            if (!user || !user.name || success) {\r\n                dispatch({ type: USER_UPDATE_PROFILE_RESET })\r\n                dispatch(getUserDetails('profile'))\r\n            } else {\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n            }\r\n        }\r\n    }, [history, userInfo, dispatch, user, success])\r\n\r\n    return (\r\n        <>\r\n            {/* { error && errorHandler()} */}\r\n            {loading && <Loader />}\r\n            <div className='flex column'>\r\n                <h1 className='my-2'>Edit Profile</h1>\r\n                <form onSubmit={submitHandler}>\r\n                    <input\r\n                        type=\"email\"\r\n                        required={true}\r\n                        className='input my-1'\r\n                        placeholder='Enter Email'\r\n                        value={email}\r\n                        onChange={e => setEmail(e.target.value)}\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        required={true}\r\n                        className='input my-1'\r\n                        placeholder='Enter Name'\r\n                        value={name}\r\n                        onChange={e => setName(e.target.value)}\r\n                    />\r\n                    <input\r\n                        type=\"password\"\r\n                        required={true}\r\n                        className='input my-1'\r\n                        placeholder='Enter Password'\r\n                        value={password}\r\n                        onChange={e => setPassword(e.target.value)}\r\n                    />\r\n                    <input\r\n                        type=\"password\"\r\n                        required={true}\r\n                        className='input my-1'\r\n                        placeholder='Confirm Password'\r\n                        value={confirmPassword}\r\n                        onChange={e => setConfirmPassword(e.target.value)}\r\n                    />\r\n                    <button className='btn' type='submit'>Submit</button>\r\n                </form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileScreen\r\n","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\ShippingScreen.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\components\\CheckoutSteps.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\PaymentScreen.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\PlaceOrderScreen.js",["185"],"import { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { createOrder  } from '../actions/orderActions'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport ImageLoader from '../components/ImageLoader'\r\n\r\nconst PlaceOrderScreen = ({ history }) => {\r\n\r\n    const cart = useSelector(state => state.cart)\r\n\r\n    const addDecimals = num => {\r\n        return (Math.round(num * 100) / 100).toFixed(2)\r\n    }\r\n\r\n    // Calculate Prices\r\n    cart.itemsPrice = addDecimals(cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0))\r\n\r\n    cart.shippingPrice = addDecimals(cart.itemsPrice > 100 ? 0 : 100)\r\n    console.log(cart.shippingPrice)\r\n    cart.taxPrice = addDecimals(Number((0.10 * cart.itemsPrice).toFixed(2)))\r\n    cart.totalPrice = (Number(cart.itemsPrice) + Number(cart.shippingPrice) + Number(cart.taxPrice)).toFixed(2)\r\n\r\n    const { address, postalCode, country, city } = cart.shippingAddress\r\n    const dispatch = useDispatch()\r\n\r\n    const orderCreate = useSelector(state => state.orderCreate)\r\n    const { order, success } = orderCreate\r\n\r\n    useEffect(() => {\r\n        if (success) {\r\n            history.push(`/order/${order._id}`)\r\n        }\r\n    }, [history, success])\r\n\r\n    const placeOrderHandler = () => {\r\n        dispatch(createOrder({\r\n            orderItems: cart.cartItems,\r\n            shippingAddress: cart.shippingAddress,\r\n            paymentMethod: cart.paymentMethod,\r\n            itemsPrice: cart.itemsPrice,\r\n            shippingPrice: cart.shippingPrice,\r\n            taxPrice: cart.taxPrice,\r\n            totalPrice: cart.totalPrice\r\n        }))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='flex column'>\r\n            <CheckoutSteps step1 step2 step3 step4 />\r\n            <div className='grid grid-offset my-1'>\r\n                <div className='order-details-container px-1'>\r\n                    <div className='address-'>\r\n                        <h2 className='underline'>Shipping</h2>\r\n                        <strong>Address: </strong>\r\n                        <p>{address}</p>\r\n                        <p>{city}</p>\r\n                        <p>{postalCode}</p>\r\n                        <p>{country}</p>\r\n                    </div>\r\n                    <div className='payment-field my-1 p-1 bg-primary border'>\r\n                        <h2 className='underline'>Payment Method</h2>\r\n                        <strong>Method: </strong>{cart.paymentMethod}\r\n                    </div>\r\n                    <div className='my-1 items-field'>\r\n                        <h2 className='underline'>Items</h2>\r\n                        {cart.cartItems.length === 0 ?\r\n                            <strong>Your Cart is Empty!</strong>\r\n                            :\r\n                            <div>\r\n                                {cart.cartItems.map((item, i) => (\r\n                                    <div\r\n                                        className='grid grid-3'\r\n                                        key={item.product}\r\n                                    >\r\n                                        <div style={{ maxWidth: '100px' }}>\r\n                                            <ImageLoader product={item} />\r\n                                        </div>\r\n                                        <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                        {item.qty} x ${item.price} = ${item.price * item.qty}\r\n\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div >\r\n                    <div className='m0-auto p-1 bg-primary border'>\r\n                        <h2 className='m-1 text-center underline'>Summary</h2>\r\n                        <div className=\"pricing-breakdown\">\r\n                            <p><strong>Sub Total: </strong>${cart.itemsPrice}</p>\r\n                            <p><strong>Shipping: </strong>{cart.shippingPrice}</p>\r\n                            <p><strong>Tax: </strong>{cart.taxPrice}</p>\r\n                            <p className='m-1'><h3>Total: </h3><strong>${cart.totalPrice}</strong></p>\r\n                            <button onClick={placeOrderHandler} className='btn btn-light m-1'>Place Order</button>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlaceOrderScreen\r\n","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\reducers\\orderReducer.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\constants\\orderConstants.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\actions\\orderActions.js",[],"C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\OrderScreen.js",["186"],"import { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport { PayPalButton } from 'react-paypal-button-v2'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { getOrderDetails, payOrder } from '../actions/orderActions'\r\nimport { setToast } from '../actions/toastActions'\r\nimport Loader from '../components/Loader'\r\nimport ImageLoader from '../components/ImageLoader'\r\nimport { ORDER_PAY_RESET } from '../constants/orderConstants'\r\n\r\nconst PlaceOrderScreen = ({ match }) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const orderId = match.params.id\r\n\r\n    const [sdkReady, setSdkReady] = useState(false)\r\n\r\n    const orderDetails = useSelector(state => state.orderDetails)\r\n    const { order, loading, success } = orderDetails\r\n\r\n    const orderPay = useSelector(state => state.orderPay)\r\n    const { loading: loadingPay, success: successPay } = orderPay  //renaming loading and success variables\r\n\r\n    useEffect(() => {\r\n\r\n        const addPayPalScript = async () => {\r\n            const { data: clientId } = await axios('/api/config/paypal')\r\n            const script = document.createElement('script')\r\n            script.type = 'text/javascript'\r\n            script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`\r\n            script.async = true\r\n            script.onload = () => {\r\n                setSdkReady(true)\r\n            }\r\n            document.body.appendChild(script)\r\n        }\r\n\r\n        if (!order || order._id !== orderId || successPay) {\r\n            dispatch({ type: ORDER_PAY_RESET })\r\n            console.log(orderId)\r\n            dispatch(getOrderDetails(orderId))\r\n        } else if (!order.isPaid) {\r\n            if (!window.paypal) {\r\n                addPayPalScript()\r\n            } else {\r\n                setSdkReady(true)\r\n            }\r\n        }\r\n\r\n\r\n        if (success) dispatch(setToast(\"Congratulations! Your order is complete!\"))\r\n    }, [order, orderId, dispatch, successPay])\r\n\r\n    const successPaymentHandler = (paymentResult) => {\r\n      console.log(paymentResult)\r\n      dispatch(payOrder(orderId, paymentResult))\r\n    }\r\n\r\n    return (\r\n        loading ? <Loader /> :\r\n            <>\r\n                <h1 className='text-center m-2' >Order #{order._id}</h1>\r\n                <div className='grid grid-offset my-1'>\r\n                    <div className='order-details-container px-1'>\r\n                        <div className='address-'>\r\n                            <h2 className='underline'>Shipping</h2>\r\n                            <p>{order.user.name}</p>\r\n                            <p>{order.shippingAddress.address}</p>\r\n                            <p>{order.shippingAddress.city}</p>\r\n                            <p>{order.shippingAddress.postalCode}</p>\r\n                            <p>{order.shippingAddress.country}</p>\r\n                        </div>\r\n                        <div className='payment-field my-1 p-1 bg-primary border'>\r\n                            <h2 className='underline'>Payment Method</h2>\r\n                            <p>{order.paymentMethod}</p>\r\n                            <strong className={!order.isPaid && 'text-error'}>\r\n                                {!order.isPaid ? \"Not Paid\" : \"Payment Successful!\"}\r\n                            </strong>\r\n                        </div>\r\n                        <div className='my-1 items-field'>\r\n                            <h2 className='underline'>Items</h2>\r\n                            {order.orderItems.length === 0 ?\r\n                                <strong>Order is Empty!</strong>\r\n                                :\r\n                                <div>\r\n                                    {order.orderItems.map((item, i) => (\r\n                                        <div\r\n                                            className='grid grid-3'\r\n                                            key={item.product}\r\n                                        >\r\n                                            <div style={{ maxWidth: '100px' }}>\r\n                                                <ImageLoader product={item} />\r\n                                            </div>\r\n                                            <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                            {item.qty} x ${item.price} = ${item.price * item.qty}\r\n\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div >\r\n                        <div className='m0-auto p-1 bg-primary border'>\r\n                            <h2 className='m-1 text-center underline'>Summary</h2>\r\n                            <div className=\"pricing-breakdown\">\r\n                                <p><strong>Sub Total: </strong>${order.itemsPrice}</p>\r\n                                <p><strong>Shipping: </strong>{order.shippingPrice}</p>\r\n                                <p><strong>Tax: </strong>{order.taxPrice}</p>\r\n                                <div className='m-1'><h3>Total: </h3><strong>${order.totalPrice}</strong></div>\r\n                            </div>\r\n                            {!order.isPaid &&\r\n                                <div>\r\n                                   {loadingPay && <Loader />}\r\n                                   {!sdkReady ? <Loader /> : (\r\n                                       <PayPalButton \r\n                                         amount={order.totalPrice} \r\n                                         onSuccess={successPaymentHandler}\r\n                                       />\r\n                                   )}\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n    )\r\n}\r\n\r\nexport default PlaceOrderScreen\r\n","C:\\Users\\Tim\\dev\\MERN\\Ecommerce2\\client\\src\\screens\\OrderHistoryScreen.js",["187","188","189"],"import { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setToast } from '../actions/toastActions'\r\nimport Loader from '../components/Loader'\r\nimport { listMyOrders } from '../actions/orderActions'\r\n\r\nconst OrderHistoryScreen = ({ history }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const orderListMy = useSelector(state => state.orderListMy)\r\n    const { orders, loading: loadingOrders } = orderListMy\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    useEffect(() => {\r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        } else {\r\n            dispatch(listMyOrders())\r\n        }\r\n    }, [history, userInfo, dispatch])\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {loadingOrders ?\r\n                <Loader />\r\n                :\r\n                <div>\r\n                    <h1 className='text-center m-3'>Your Orders</h1>\r\n                    <table id=\"order\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Order Id</th>\r\n                                <th>Date</th>\r\n                                <th>Total</th>\r\n                                <th>Paid</th>\r\n                                <th>Delivered</th>\r\n                            </tr>\r\n                            {orders.map(order => (\r\n                                <tr key={order._id}>\r\n                                    <td><Link to={`/order/${order._id}`}>{order._id}</Link></td>\r\n                                    <td>{new Date(order.createdAt).toLocaleDateString('en-US')}</td>\r\n                                    <td>{order.totalPrice}</td>\r\n                                    <td>\r\n                                        {\r\n                                          order.paidAt ? new Date(order.paidAt).toLocaleDateString('en-US') \r\n                                          : \r\n                                          <span style={{color: 'red'}}>Not Paid</span>\r\n                                        }\r\n                                    </td>\r\n                                    <td>\r\n                                        {\r\n                                            order.isDelivered ? new Date(order.isDelivered).toLocaleDateString('en-US') \r\n                                            :\r\n                                            \"Pending\"\r\n                                        }\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default OrderHistoryScreen\r\n\r\n\r\n{/* <tr className='flex'>\r\n                                <th>Order Id</th>\r\n                                <th>Date</th>\r\n                                <th>Total</th>\r\n                                <th>Paid</th>\r\n                                <th>Delivered</th>\r\n                            </tr>\r\n\r\n{orders.map(order => (\r\n    <tr>\r\n        <td>{order._id}</td>\r\n        <td>{order.paidAt ? new Date(order.paidAt).toLocaleDateString('en-US') : \"Not Paid\"}</td>\r\n        <td>{order.totalPrice}</td>\r\n        <td>{order.isPaid}</td>\r\n        <td>{order.isDelivered ? new Date(order.isDelivered).toLocaleDateString('en-US') : \"Pending\"}</td>\r\n    </tr>\r\n))} */}\r\n",{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","replacedBy":"193"},{"ruleId":"190","replacedBy":"194"},{"ruleId":"192","replacedBy":"195"},{"ruleId":"196","severity":1,"message":"197","line":12,"column":20,"nodeType":"198","messageId":"199","endLine":12,"endColumn":25},{"ruleId":"196","severity":1,"message":"197","line":13,"column":22,"nodeType":"198","messageId":"199","endLine":13,"endColumn":27},{"ruleId":"200","severity":1,"message":"201","line":19,"column":35,"nodeType":"202","endLine":22,"endColumn":39},{"ruleId":"196","severity":1,"message":"203","line":5,"column":10,"nodeType":"198","messageId":"199","endLine":5,"endColumn":18},{"ruleId":"196","severity":1,"message":"204","line":1,"column":290,"nodeType":"198","messageId":"199","endLine":1,"endColumn":315},{"ruleId":"196","severity":1,"message":"205","line":4,"column":171,"nodeType":"198","messageId":"199","endLine":4,"endColumn":190},{"ruleId":"196","severity":1,"message":"204","line":4,"column":317,"nodeType":"198","messageId":"199","endLine":4,"endColumn":342},{"ruleId":"196","severity":1,"message":"206","line":4,"column":344,"nodeType":"198","messageId":"199","endLine":4,"endColumn":369},{"ruleId":"196","severity":1,"message":"207","line":6,"column":20,"nodeType":"198","messageId":"199","endLine":6,"endColumn":34},{"ruleId":"196","severity":1,"message":"208","line":2,"column":10,"nodeType":"198","messageId":"199","endLine":2,"endColumn":14},{"ruleId":"196","severity":1,"message":"197","line":19,"column":22,"nodeType":"198","messageId":"199","endLine":19,"endColumn":27},{"ruleId":"209","severity":1,"message":"210","line":34,"column":8,"nodeType":"211","endLine":34,"endColumn":26,"suggestions":"212"},{"ruleId":"209","severity":1,"message":"213","line":53,"column":8,"nodeType":"211","endLine":53,"endColumn":46,"suggestions":"214"},{"ruleId":"196","severity":1,"message":"215","line":1,"column":10,"nodeType":"198","messageId":"199","endLine":1,"endColumn":18},{"ruleId":"196","severity":1,"message":"203","line":4,"column":10,"nodeType":"198","messageId":"199","endLine":4,"endColumn":18},{"ruleId":"216","severity":1,"message":"217","line":77,"column":1,"nodeType":"218","messageId":"219","endLine":93,"endColumn":8},"no-native-reassign",["220"],"no-negated-in-lhs",["221"],["220"],["221"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setToast' is defined but never used.","'USER_UPDATE_PROFILE_CLEAR' is defined but never used.","'USER_DELETE_SUCCESS' is defined but never used.","'USER_UPDATE_PROFILE_RESET' is defined but never used.","'clearLoginFail' is defined but never used.","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'order._id'. Either include it or remove the dependency array.","ArrayExpression",["222"],"React Hook useEffect has a missing dependency: 'success'. Either include it or remove the dependency array.",["223"],"'useState' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-global-assign","no-unsafe-negation",{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},"Update the dependencies array to be: [history, order._id, success]",{"range":"228","text":"229"},"Update the dependencies array to be: [order, orderId, dispatch, successPay, success]",{"range":"230","text":"231"},[1269,1287],"[history, order._id, success]",[1965,2003],"[order, orderId, dispatch, successPay, success]"]